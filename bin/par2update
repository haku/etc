#!/usr/bin/env ruby
require 'find'
require 'open3'
require 'filesize'

def gen_par(dir, files)
  puts "  protecting #{files.size} files ... "
  Dir.chdir(dir) do
    Open3.popen3('par2', 'c', '-r10', '-q', '--', "#{File.basename(dir)}.par2", *files) do |i, o, e, t|
      while line = o.gets
      end
      err = e.readlines
      err.each{|l| puts "    #{l}"}
      t.value.success? ? nil : ([ "[#{dir}] generate failed: [#{t.value}]" ] + err)
    end
  end
  puts "  #{files.size} files protected (#{Filesize.new(par_size(dir)).pretty} of par2)."
end

def ver_par(dir, all_files)
  puts "  verifying #{all_files.size} files... "
  prot_files = []
  err_files = []
  res = Dir.chdir(dir) do
    Open3.popen3('par2', 'v', '-q', '--', "#{File.basename(dir)}.par2") do |i, o, e, t|
      while line = o.gets
        prot_file = line[/^Target: "(.+)" - found\.$/, 1]
        prot_files << prot_file if prot_file

        if !prot_file
          err_file = line[/^Target: (.+)$/, 1]
          err_files << err_file if err_file
        end
      end
      err = e.readlines
      err.each{|l| puts "    #{l}"}
      err_files.each{|l| puts "    #{l}"}
      t.value.success? ? nil : ([ "[#{dir}] verify failed: [#{t.value}]" ] + err + err_files)
    end
  end
  return res if res

  raise "No file names found par2 output.  Has par2's output format changed?" if prot_files.size < 1
  puts "  #{prot_files.size} files verified (#{Filesize.new(par_size(dir)).pretty} of par2)."

  new_files = all_files - prot_files
  if new_files.size > 0
    puts "  #{new_files.size} unprotected files:"
    new_files.each{|f| puts "    #{f}"}
    res = backup_par dir
    return res if res
    gen_par(dir, all_files)
  end
end

def par_size(dir)
  Dir.chdir(dir) do
    Dir.entries(dir).select{|e| e.end_with?('.par2')}.inject(0){|sum, f| sum += File.size(f)}
  end
end

def backup_par(dir)
  puts "  backing up par files... "
  Dir.chdir(dir) do
    par_files = Dir.entries(dir).select{|e| e.end_with?('.par2')}
    res = system('tar', 'cf', "#{File.basename(dir)}.parbackup.#{Time.now.strftime('%Y%m%d-%H%M%S')}.tar", *par_files)
    res ? nil : [ "[#{dir}] backup par failed: [#{$?}]" ]
  end
end

errors = []
base_dir = "#{Dir.pwd}/"
Find.find(base_dir) do |d|
  next if !FileTest.directory?(d)

  files = Dir.entries(d)
  par2_files = files.select{|e| e.end_with?('.par2')}
  data_files = (files - par2_files).select{|e| File.file?("#{d}/#{e}")}

  if data_files.size > 0
    puts d.gsub(base_dir, './')

    if par2_files.size > 0
      res = ver_par(d, data_files)
      errors << res if res
    else
      res = gen_par(d, data_files)
      errors << res if res
    end
  end
end

if errors.size > 0
  puts "directories with errors: #{errors.size}"
  errors.each do |e|
    puts "  #{e.shift}"
    e.each{|l| puts "    #{l}"}
  end
  exit 1
end

puts 'success.'
